name: Build and Deploy Code

# on: # Some actions triggered it like push, merge or both [push, pull_request]
#   push:
#     branches: # Put some branches you wanna update here like main, or both ["main", "another branch"]
#       - "main"
#       - "another branches"
#   pull_request:
#     branches:
#       - "test_branch"

on: [push, pull_request] # define these actions to trigger our workflow

# Next, create a job, which is a list of steps
jobs:
  build:
    environment:
      name: testing
    env:
      DATABASE_HOSTNAME: ${{secrets.DATABASE_HOSTNAME}}
      DATABASE_PORT: ${{secrets.DATABASE_PORT}}
      DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
      DATABASE_NAME: ${{secrets.DATABASE_NAME}}
      DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
      secret_key: ${{secrets.secret_key}}
      algorithm: ${{secrets.algorithm}}
      access_token_expires_minutes: ${{secrets.access_token_expires_minutes}}
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
          POSTGRES_DB: ${{secrets.DATABASE_NAME}}_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    runs-on: ubuntu-latest # Specify operating system, like linux, mac(macos-latest) or window.
    steps:
      - name: Pulling git repo
        uses: actions/checkout@v2
      # Just for example how to setup task step by step
      # - name: Say hi to ethan
      #   run: echo "hello ethan"
      - name: Install python version 3.9
        uses: actions/setup-python @v2
        with:
          python-version: "3.9"
      - name: update pip
        run: python -m pip install --upgrade pip
      - name: Install all dependencies
        run: pip install -r requirement.txt
      - name: Install and work with pytest
        run: pip install pytest
          pytest

      - name: Login to docker hub
        uses: docker-login/action@v1
        with:
          username: ${{secrets.DOCKER_HUB_USERNAME}}
          password: ${{secrets.DOCKER_HUB_ACCESS_TOKEN}}

      # We always don't use docker in production, so now i just comment below code out
      # Optimize our process so that not need to reinstall anything, save money and time!!!
      # - name: Set up Docker Buildx
      #   id: buildx
      #   uses: docker/setup-buildx-action@v1

      # - name: Build and push
      #   id: docker_build
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: ./
      #     file: ./Dockerfile
      #     builder: ${{ steps.buildx.outputs.name }}
      #     push: true
      #     tags: ${{ secrets.DOCKER_HUB_USERNAME }}/fastapi:latest
      #     cache-from: type=local,src=/tmp/.buildx-cache
      #     cache-to: type=local,dest=/tmp/.buildx-cache
      # - name: Image digest
      #   run: echo ${{ steps.docker_build.outputs.digest }}


# For the deploy steps: 
# 1. pull our github repo
# 2. install heroku cli
# 3. heroku login
# 4. add git remote for heroku
# 5. git push reroku main

# Instead of manually provide action of above steps, we can choose some in marketplace, which deploying to heroku then directly copy the code.

  deploy:
    runs-on: ubuntu-latest
      need: [build]
    environment:
      name: production
    steps:
      - name: pulling git repo
        uses: actions/checkout@v2
      - name: deploying to Heroku
        uses: akhileshns/heroku-deploy@v3.12.12 # This is the action
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: ${{secrets.HEROKU_APP_NAME}}
          heroku_email: ${{secrets.HEROKU_EMAIL}}

      - name: deploy to ubuntu server
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.PROD_HOST}}
          username: ${{secrets.PROD_USERNAME}}
          password: ${{secrets.PROD_PASSWORD}}
          script: |
            cd app/src
            git pull
            echo ${{secrets.PROD_PASSWORD}} | sudo -S systemctl restart api
      # login to our ubuntu
      # cd /app/src
      # git pull
      # systemctl restart api




